#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Script de verificaci√≥n final para confirmar que los errores de sintaxis JavaScript han sido corregidos
"""

import requests
import time
import json
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException

def test_page_loading():
    """Prueba b√°sica de carga de p√°gina"""
    try:
        response = requests.get('http://127.0.0.1:8000/dashboard/inventario/', timeout=10)
        if response.status_code == 200:
            print("‚úÖ P√°gina de inventario carga correctamente (HTTP 200)")
            return True
        else:
            print(f"‚ùå Error de carga: HTTP {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False

def test_javascript_execution():
    """Prueba de ejecuci√≥n de JavaScript usando navegador"""
    options = Options()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-gpu')
    options.add_argument('--window-size=1280,720')
    
    driver = None
    try:
        driver = webdriver.Chrome(options=options)
        
        print("üåê Abriendo p√°gina en navegador headless...")
        driver.get('http://127.0.0.1:8000/dashboard/inventario/')
        
        # Esperar a que la p√°gina cargue completamente
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        
        # Verificar que no hay errores de JavaScript en la consola
        logs = driver.get_log('browser')
        js_errors = [log for log in logs if log['level'] == 'SEVERE' and 'SyntaxError' in log['message']]
        
        if js_errors:
            print("‚ùå Errores de sintaxis JavaScript encontrados:")
            for error in js_errors:
                print(f"   üî¥ {error['message']}")
            return False
        else:
            print("‚úÖ No se encontraron errores de sintaxis JavaScript")
        
        # Verificar que el bot√≥n de nuevo insumo existe y es clickeable
        try:
            nuevo_insumo_btn = WebDriverWait(driver, 5).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, '[data-bs-target="#nuevoInsumoModal"]'))
            )
            print("‚úÖ Bot√≥n 'Nuevo Insumo' encontrado y clickeable")
        except TimeoutException:
            print("‚ùå Bot√≥n 'Nuevo Insumo' no encontrado o no clickeable")
            return False
        
        # Intentar abrir el modal (esto ejecutar√° JavaScript)
        try:
            driver.execute_script("arguments[0].click();", nuevo_insumo_btn)
            
            # Esperar a que el modal aparezca
            modal = WebDriverWait(driver, 5).until(
                EC.visibility_of_element_located((By.ID, "nuevoInsumoModal"))
            )
            print("‚úÖ Modal de nuevo insumo se abre correctamente")
            
            # Verificar que los elementos del formulario existen
            form_elements = [
                'nombre', 'codigo', 'categoria', 'unidad_medida', 
                'tipo', 'precio_unitario', 'stock_actual', 'stock_minimo'
            ]
            
            for element_id in form_elements:
                try:
                    element = driver.find_element(By.ID, element_id)
                    print(f"‚úÖ Campo '{element_id}' encontrado")
                except:
                    print(f"‚ùå Campo '{element_id}' NO encontrado")
                    return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error al abrir modal: {e}")
            return False
        
    except WebDriverException as e:
        print(f"‚ùå Error de WebDriver: {e}")
        print("‚ÑπÔ∏è  Nota: Puede que Chrome no est√© instalado o no est√© en el PATH")
        return None
    
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return None
    
    finally:
        if driver:
            driver.quit()

def test_api_endpoints():
    """Prueba los endpoints de API"""
    endpoints = [
        '/dashboard/get-form-data/',
        '/dashboard/crear-insumo/',
        '/dashboard/crear-categoria/',
        '/dashboard/crear-unidad-medida/'
    ]
    
    print("\nüîß Probando endpoints de API...")
    for endpoint in endpoints:
        try:
            url = f'http://127.0.0.1:8000{endpoint}'
            response = requests.get(url, timeout=5)
            
            if response.status_code in [200, 405]:  # 405 para POST endpoints
                print(f"‚úÖ Endpoint {endpoint} disponible")
            else:
                print(f"‚ùå Endpoint {endpoint}: HTTP {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Endpoint {endpoint}: Error de conexi√≥n")

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üîç VERIFICACI√ìN FINAL - CORRECCI√ìN DE SINTAXIS JAVASCRIPT")
    print("=" * 70)
    
    # Prueba 1: Carga b√°sica de p√°gina
    print("\nüìã 1. Probando carga de p√°gina...")
    page_loads = test_page_loading()
    
    # Prueba 2: Endpoints de API
    test_api_endpoints()
    
    # Prueba 3: Ejecuci√≥n de JavaScript
    print("\nüöÄ 3. Probando ejecuci√≥n de JavaScript...")
    js_works = test_javascript_execution()
    
    # Resultado final
    print("\n" + "=" * 70)
    print("üìä RESUMEN DE VERIFICACI√ìN:")
    
    if page_loads:
        print("‚úÖ Carga de p√°gina: EXITOSA")
    else:
        print("‚ùå Carga de p√°gina: FALLIDA")
    
    if js_works is True:
        print("‚úÖ Ejecuci√≥n de JavaScript: EXITOSA")
        print("‚úÖ Modal de nuevo insumo: FUNCIONAL")
        print("‚úÖ Formulario de insumo: ELEMENTOS PRESENTES")
    elif js_works is False:
        print("‚ùå Ejecuci√≥n de JavaScript: FALLIDA")
    else:
        print("‚ö†Ô∏è  Ejecuci√≥n de JavaScript: NO PUDO PROBARSE (Chrome no disponible)")
    
    # Conclusi√≥n
    if page_loads and (js_works is True or js_works is None):
        print("\nüéâ CONCLUSI√ìN: Los errores de sintaxis JavaScript han sido CORREGIDOS")
        print("‚úÖ La p√°gina de inventario est√° funcionando correctamente")
        print("‚úÖ El formulario de nuevo insumo deber√≠a funcionar sin errores")
    else:
        print("\n‚ö†Ô∏è  CONCLUSI√ìN: A√∫n pueden existir problemas")
        print("üîç Revisar manualmente la consola del navegador para m√°s detalles")

if __name__ == "__main__":
    main()
