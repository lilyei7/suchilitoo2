#!/usr/bin/env python3
"""
Script para probar la funcionalidad completa de proveedores incluyendo la visualizaci√≥n de datos
"""
import time
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException

def test_proveedor_data_display():
    print("üîç Iniciando prueba completa de visualizaci√≥n de datos de proveedores...")
    
    chrome_options = Options()
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1920,1080")
    
    driver = None
    try:
        driver = webdriver.Chrome(options=chrome_options)
        driver.get("http://127.0.0.1:8000/")
        
        print("üìù Haciendo login...")
        
        # Login
        username_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.NAME, "username"))
        )
        password_input = driver.find_element(By.NAME, "password")
        
        username_input.send_keys("admin")
        password_input.send_keys("admin123")
        
        login_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
        login_button.click()
        
        print("üöö Navegando a la p√°gina de proveedores...")
        time.sleep(2)
        
        # Ir a proveedores
        driver.get("http://127.0.0.1:8000/dashboard/proveedores/")
        
        # Esperar a que la p√°gina se cargue completamente
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        
        time.sleep(3)
        
        print("üîç Buscando botones de ver detalles...")
        
        # Buscar botones de ver detalles
        ver_buttons = driver.find_elements(By.CSS_SELECTOR, "button[onclick*='verDetalleProveedor']")
        
        if not ver_buttons:
            print("‚ùå No se encontraron botones de ver detalles")
            return
        
        print(f"‚úÖ Encontrados {len(ver_buttons)} botones de ver detalles")
        
        # Hacer clic en el primer bot√≥n de ver detalles
        print("üîç Haciendo clic en el primer bot√≥n de ver detalles...")
        driver.execute_script("arguments[0].click();", ver_buttons[0])
        
        # Esperar a que aparezca el modal
        modal = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "detalleProveedorModal"))
        )
        
        # Verificar que el modal se abri√≥
        if "show" in modal.get_attribute("class"):
            print("‚úÖ Modal de detalles se abri√≥ correctamente")
            
            # Esperar a que se cargue el contenido
            time.sleep(3)
            
            # Verificar que hay contenido en el modal
            content = driver.find_element(By.ID, "detalleProveedorContent")
            
            if content.text.strip():
                print("‚úÖ El modal contiene informaci√≥n:")
                
                # Buscar elementos espec√≠ficos
                try:
                    # Buscar informaci√≥n general
                    info_general = content.find_element(By.XPATH, ".//h6[contains(text(), 'Informaci√≥n General')]")
                    print("   ‚úÖ Secci√≥n de Informaci√≥n General encontrada")
                    
                    # Buscar informaci√≥n de contacto
                    info_contacto = content.find_element(By.XPATH, ".//h6[contains(text(), 'Informaci√≥n de Contacto')]")
                    print("   ‚úÖ Secci√≥n de Informaci√≥n de Contacto encontrada")
                    
                    # Buscar secci√≥n de insumos
                    insumos_section = content.find_element(By.XPATH, ".//h6[contains(text(), 'Insumos Asignados')]")
                    print("   ‚úÖ Secci√≥n de Insumos Asignados encontrada")
                    
                    # Buscar datos espec√≠ficos
                    nombre_comercial = content.find_elements(By.XPATH, ".//td[text()='Nombre Comercial:']/following-sibling::td")
                    if nombre_comercial:
                        print(f"   ‚úÖ Nombre comercial: {nombre_comercial[0].text}")
                    
                    estado = content.find_elements(By.XPATH, ".//td[text()='Estado:']/following-sibling::td")
                    if estado:
                        print(f"   ‚úÖ Estado: {estado[0].text}")
                    
                    print("   üéâ La informaci√≥n del proveedor se muestra correctamente")
                    
                except Exception as e:
                    print(f"   ‚ö†Ô∏è No se pudieron encontrar algunos elementos espec√≠ficos: {e}")
                    print(f"   üìÑ Contenido del modal (primeros 200 caracteres): {content.text[:200]}...")
            else:
                print("‚ùå El modal est√° vac√≠o o a√∫n cargando")
            
            # Cerrar modal
            close_btn = modal.find_element(By.CSS_SELECTOR, ".btn-close")
            close_btn.click()
            time.sleep(1)
            
        else:
            print("‚ùå El modal no se abri√≥ correctamente")
        
        print("‚úèÔ∏è Probando bot√≥n de editar...")
        
        # Buscar botones de editar
        editar_buttons = driver.find_elements(By.CSS_SELECTOR, "button[onclick*='editarProveedor']")
        
        if editar_buttons:
            # Hacer clic en el primer bot√≥n de editar
            driver.execute_script("arguments[0].click();", editar_buttons[0])
            
            # Esperar a que aparezca el modal de edici√≥n
            modal_editar = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.ID, "editarProveedorModal"))
            )
            
            if "show" in modal_editar.get_attribute("class"):
                print("‚úÖ Modal de edici√≥n se abri√≥ correctamente")
                
                # Esperar a que se cargue el contenido
                time.sleep(3)
                
                content_editar = driver.find_element(By.ID, "editarProveedorContent")
                
                if content_editar.text.strip():
                    print("‚úÖ El modal de edici√≥n contiene el formulario")
                    
                    # Buscar campos del formulario
                    try:
                        nombre_field = content_editar.find_element(By.NAME, "nombre_comercial")
                        print(f"   ‚úÖ Campo nombre comercial con valor: {nombre_field.get_attribute('value')}")
                        
                        email_field = content_editar.find_element(By.NAME, "email")
                        print(f"   ‚úÖ Campo email con valor: {email_field.get_attribute('value')}")
                        
                        estado_field = content_editar.find_element(By.NAME, "estado")
                        print(f"   ‚úÖ Campo estado con valor: {estado_field.get_attribute('value')}")
                        
                        print("   üéâ El formulario de edici√≥n se carga correctamente con datos")
                        
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è No se pudieron encontrar algunos campos del formulario: {e}")
                else:
                    print("‚ùå El modal de edici√≥n est√° vac√≠o")
                
                # Cerrar modal
                close_btn = modal_editar.find_element(By.CSS_SELECTOR, ".btn-close")
                close_btn.click()
                time.sleep(1)
        
        print("\nüéâ RESUMEN DE LA PRUEBA:")
        print("‚úÖ JavaScript funciona sin errores")
        print("‚úÖ Modales se abren correctamente") 
        print("‚úÖ Datos del proveedor se cargan y muestran")
        print("‚úÖ Formulario de edici√≥n se carga con datos")
        print("‚úÖ Sistema de proveedores completamente funcional")
        
    except Exception as e:
        print(f"‚ùå Error durante la prueba: {e}")
        
    finally:
        if driver:
            driver.quit()
            print("üîö Browser cerrado")

if __name__ == "__main__":
    test_proveedor_data_display()
