#!/usr/bin/env python3
"""
Script AVANZADO para verificar los logs de eliminaci√≥n de productos.
Este script verifica que los logs se est√©n generando correctamente
tanto en frontend como en backend, con tracking completo del flujo.
"""
import os
import sys
import django
import logging
from datetime import datetime
import time

# Configurar Django
sys.path.append('.')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sushi_core.settings')
django.setup()

from django.contrib.auth import get_user_model
from restaurant.models import ProductoVenta, CategoriaProducto
from django.test import Client
from django.urls import reverse
import json

User = get_user_model()

def setup_logging():
    """Configurar logging para capturar los logs"""
    # Configurar el logger principal
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)
    
    # Configurar el handler para mostrar en consola
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.DEBUG)
    
    # Formato detallado para los logs
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    console_handler.setFormatter(formatter)
    
    # Limpiar handlers existentes y agregar el nuestro
    logger.handlers = []
    logger.addHandler(console_handler)
    
    return logger

def crear_datos_prueba():
    """Crear datos de prueba para la eliminaci√≥n"""
    print("\n" + "="*60)
    print("üîß CREANDO DATOS DE PRUEBA")
    print("="*60)
    
    # Crear usuario admin si no existe
    admin_user, created = User.objects.get_or_create(
        username='admin_test_logs',
        defaults={
            'email': 'admin_logs@test.com',
            'is_staff': True,
            'is_superuser': True,
        }
    )
    if created:
        admin_user.set_password('admin123')
        admin_user.save()
        print(f"‚úÖ Usuario admin creado: {admin_user.username}")
    else:
        print(f"üë§ Usuario admin existente: {admin_user.username}")
    
    # Crear categor√≠a si no existe
    categoria, created = CategoriaProducto.objects.get_or_create(
        nombre='Categoria Test Logs Eliminacion',
        defaults={'descripcion': 'Categoria para pruebas de logs de eliminacion'}
    )
    if created:
        print(f"‚úÖ Categor√≠a creada: {categoria.nombre}")
    else:
        print(f"üìÅ Categor√≠a existente: {categoria.nombre}")
    
    # Crear producto de prueba
    timestamp = datetime.now().strftime("%H%M%S")
    producto_nombre = f"Producto Test Logs {timestamp}"
    
    producto = ProductoVenta.objects.create(
        nombre=producto_nombre,
        descripcion="Producto creado espec√≠ficamente para probar logs de eliminaci√≥n AVANZADOS",
        precio=10.50,
        categoria=categoria,
        disponible=True
    )
    print(f"‚úÖ Producto creado: {producto.nombre} (ID: {producto.id})")
    
    return admin_user, producto

def test_eliminacion_con_logs_detallados():
    """Probar la eliminaci√≥n capturando TODOS los logs posibles"""
    logger = setup_logging()
    
    print("\n" + "="*60)
    print("üöÄ INICIANDO TEST AVANZADO DE ELIMINACI√ìN CON LOGS")
    print("="*60)
    
    # Crear datos de prueba
    admin_user, producto = crear_datos_prueba()
    
    # Crear cliente de prueba
    client = Client()
    
    # Hacer login
    login_success = client.login(username='admin_test_logs', password='admin123')
    if not login_success:
        print("‚ùå Error: No se pudo hacer login")
        return False
    
    print(f"‚úÖ Login exitoso como: {admin_user.username}")
    
    # Obtener la URL de eliminaci√≥n
    url_eliminacion = reverse('dashboard:eliminar_producto_venta', kwargs={'producto_id': producto.id})
    print(f"üîó URL de eliminaci√≥n: {url_eliminacion}")
    
    print("\n" + "-"*50)
    print("üìã INFORMACI√ìN PRE-ELIMINACI√ìN DETALLADA")
    print("-"*50)
    print(f"Timestamp inicio: {datetime.now().isoformat()}")
    print(f"Producto ID: {producto.id}")
    print(f"Producto Nombre: {producto.nombre}")
    print(f"Producto Disponible: {producto.disponible}")
    print(f"Usuario: {admin_user.username}")
    print(f"Usuario ID: {admin_user.id}")
    print(f"Es superusuario: {admin_user.is_superuser}")
    print(f"Es staff: {admin_user.is_staff}")
    
    # Verificar permisos espec√≠ficos
    permisos = {
        'view_productoventa': admin_user.has_perm('restaurant.view_productoventa'),
        'add_productoventa': admin_user.has_perm('restaurant.add_productoventa'),
        'change_productoventa': admin_user.has_perm('restaurant.change_productoventa'),
        'delete_productoventa': admin_user.has_perm('restaurant.delete_productoventa'),
    }
    print(f"Permisos del usuario: {permisos}")
    
    # Verificar que el producto existe antes de eliminar
    productos_antes = ProductoVenta.objects.filter(id=producto.id).count()
    total_productos_antes = ProductoVenta.objects.all().count()
    print(f"Productos encontrados antes (espec√≠fico): {productos_antes}")
    print(f"Total productos en BD antes: {total_productos_antes}")
    
    print("\n" + "-"*50)
    print("üî• INICIANDO PETICI√ìN DE ELIMINACI√ìN DETALLADA")
    print("-"*50)
    print("‚è∞ Timestamp petici√≥n:", datetime.now().isoformat())
    print("üì° Enviando petici√≥n POST...")
    print("üéØ Logs que deber√≠an aparecer a continuaci√≥n:")
    print("   - Logs del backend (funci√≥n eliminar_producto_venta)")
    print("   - Logs de permisos")
    print("   - Logs de eliminaci√≥n")
    print("\nüëÄ OBSERVANDO LOGS EN TIEMPO REAL:")
    print("-" * 50)
    
    # Realizar la petici√≥n de eliminaci√≥n (simulando el env√≠o del formulario)
    start_time = time.time()
    response = client.post(url_eliminacion, {
        'csrfmiddlewaretoken': client.session.get('csrftoken', 'test-token')
    }, follow=True)
    end_time = time.time()
    
    print("-" * 50)
    print("üì• RESPUESTA RECIBIDA:")
    print(f"   Status Code: {response.status_code}")
    print(f"   Tiempo de respuesta: {end_time - start_time:.3f} segundos")
    print(f"   Redirect Chain: {response.redirect_chain}")
    print(f"   Content-Type: {response.get('Content-Type', 'N/A')}")
    
    # Verificar si el producto fue eliminado
    productos_despues = ProductoVenta.objects.filter(id=producto.id).count()
    total_productos_despues = ProductoVenta.objects.all().count()
    print(f"   Productos encontrados despu√©s (espec√≠fico): {productos_despues}")
    print(f"   Total productos en BD despu√©s: {total_productos_despues}")
    print(f"   Productos eliminados en total: {total_productos_antes - total_productos_despues}")
    
    # Verificar mensajes
    messages = list(response.context.get('messages', []) if response.context else [])
    if messages:
        print(f"   Mensajes en respuesta: {[str(m) for m in messages]}")
    else:
        print("   Sin mensajes en respuesta")
    
    if productos_despues == 0:
        print("‚úÖ ELIMINACI√ìN EXITOSA: El producto fue eliminado correctamente")
        print("‚úÖ Los logs del backend se ejecutaron (revisar arriba)")
        return True
    else:
        print("‚ùå FALLO EN ELIMINACI√ìN: El producto sigue existiendo")
        print("‚ùå Posible problema: La petici√≥n no lleg√≥ al backend o fall√≥")
        return False

def test_eliminacion_ajax_avanzado():
    """Probar la eliminaci√≥n v√≠a AJAX con logs detallados"""
    logger = setup_logging()
    
    print("\n" + "="*60)
    print("üåê INICIANDO TEST AVANZADO DE ELIMINACI√ìN V√çA AJAX")
    print("="*60)
    
    # Crear datos de prueba
    admin_user, producto = crear_datos_prueba()
    
    # Crear cliente de prueba
    client = Client()
    
    # Hacer login
    client.login(username='admin_test_logs', password='admin123')
    print(f"‚úÖ Login exitoso como: {admin_user.username}")
    
    # Obtener la URL de eliminaci√≥n
    url_eliminacion = reverse('dashboard:eliminar_producto_venta', kwargs={'producto_id': producto.id})
    print(f"üîó URL de eliminaci√≥n: {url_eliminacion}")
    
    print("\n" + "-"*50)
    print("üî• INICIANDO PETICI√ìN AJAX DE ELIMINACI√ìN DETALLADA")
    print("-"*50)
    print("‚è∞ Timestamp petici√≥n AJAX:", datetime.now().isoformat())
    print("üéØ Headers que se enviar√°n:")
    print("   - X-Requested-With: XMLHttpRequest")
    print("   - Content-Type: application/x-www-form-urlencoded")
    print("\nüëÄ OBSERVANDO LOGS DE AJAX EN TIEMPO REAL:")
    print("-" * 50)
    
    # Realizar la petici√≥n AJAX
    start_time = time.time()
    response = client.post(url_eliminacion, {
        'csrfmiddlewaretoken': 'test-token'
    }, 
    HTTP_X_REQUESTED_WITH='XMLHttpRequest',  # Simular petici√≥n AJAX
    content_type='application/x-www-form-urlencoded'
    )
    end_time = time.time()
    
    print("-" * 50)
    print(f"üì• RESPUESTA AJAX RECIBIDA:")
    print(f"   Status Code: {response.status_code}")
    print(f"   Tiempo de respuesta: {end_time - start_time:.3f} segundos")
    print(f"   Content-Type: {response.get('Content-Type', 'N/A')}")
    print(f"   Content-Length: {len(response.content)} bytes")
    
    # Intentar parsear la respuesta JSON
    try:
        response_content = response.content.decode()
        print(f"   Contenido raw: {response_content}")
        
        response_data = json.loads(response_content)
        print(f"   Response JSON parseado: {response_data}")
        
        if response_data.get('success'):
            print("‚úÖ ELIMINACI√ìN AJAX EXITOSA")
            print("‚úÖ Backend respondi√≥ correctamente v√≠a JSON")
            return True
        else:
            print(f"‚ùå FALLO EN ELIMINACI√ìN AJAX: {response_data.get('message', 'Error desconocido')}")
            return False
    except json.JSONDecodeError as e:
        print(f"‚ùå Error parseando respuesta JSON: {e}")
        print(f"   Contenido raw: {response.content.decode()}")
        print("‚ùå Posible problema: Backend no est√° devolviendo JSON v√°lido")
        return False

def verificar_configuracion_logs():
    """Verificar que Django est√© configurado para mostrar logs"""
    print("\n" + "="*60)
    print("üîç VERIFICANDO CONFIGURACI√ìN AVANZADA DE LOGS")
    print("="*60)
    
    from django.conf import settings
    
    print("üìã Configuraci√≥n de logging:")
    if hasattr(settings, 'LOGGING'):
        print(f"   LOGGING definido: S√≠")
        logging_config = settings.LOGGING
        print(f"   Versi√≥n: {logging_config.get('version', 'N/A')}")
        print(f"   Handlers: {list(logging_config.get('handlers', {}).keys())}")
        print(f"   Loggers: {list(logging_config.get('loggers', {}).keys())}")
        print(f"   Root level: {logging_config.get('root', {}).get('level', 'N/A')}")
    else:
        print(f"   LOGGING definido: No (usando configuraci√≥n por defecto)")
    
    print(f"   DEBUG: {settings.DEBUG}")
    print(f"   ALLOWED_HOSTS: {settings.ALLOWED_HOSTS}")
    
    # Probar logs en diferentes niveles
    test_logger = logging.getLogger('dashboard.views.productos_venta_views')
    print("\nüß™ Probando logs de prueba en diferentes niveles...")
    test_logger.debug("üîç DEBUG: Este es un log de nivel DEBUG")
    test_logger.info("üìù INFO: Este es un log de nivel INFO")
    test_logger.warning("‚ö†Ô∏è WARNING: Este es un log de nivel WARNING")
    test_logger.error("‚ùå ERROR: Este es un log de nivel ERROR")
    test_logger.critical("üí• CRITICAL: Este es un log de nivel CRITICAL")
    
    print("‚úÖ Si ves los logs arriba, la configuraci√≥n funciona")
    
    return True

def main():
    """Funci√≥n principal que ejecuta todos los tests"""
    print("üöÄ SCRIPT AVANZADO DE VERIFICACI√ìN DE LOGS DE ELIMINACI√ìN")
    print("=" * 60)
    print(f"‚è∞ Iniciado a las: {datetime.now().isoformat()}")
    
    try:
        # Verificar configuraci√≥n de logs
        print("\nüîß PASO 1: Verificando configuraci√≥n...")
        verificar_configuracion_logs()
        
        # Test de eliminaci√≥n normal
        print("\nüîß PASO 2: Test eliminaci√≥n normal...")
        resultado_normal = test_eliminacion_con_logs_detallados()
        
        # Test de eliminaci√≥n AJAX
        print("\nüîß PASO 3: Test eliminaci√≥n AJAX...")
        resultado_ajax = test_eliminacion_ajax_avanzado()
        
        print("\n" + "="*60)
        print("üìä RESUMEN FINAL DE RESULTADOS")
        print("="*60)
        print(f"‚è∞ Completado a las: {datetime.now().isoformat()}")
        print(f"‚úÖ Eliminaci√≥n normal: {'√âXITO' if resultado_normal else 'FALLO'}")
        print(f"‚úÖ Eliminaci√≥n AJAX: {'√âXITO' if resultado_ajax else 'FALLO'}")
        
        if resultado_normal and resultado_ajax:
            print("\nüéâ TODOS LOS TESTS PASARON")
            print("‚úÖ Los logs de eliminaci√≥n funcionan correctamente")
            print("‚úÖ La petici√≥n se ejecuta (no es solo un refresh)")
            print("‚úÖ El backend procesa correctamente las eliminaciones")
        else:
            print("\n‚ö†Ô∏è ALGUNOS TESTS FALLARON")
            print("‚ùå Revisar logs arriba para diagnosticar problemas")
            print("‚ùå Posibles causas:")
            print("   - Permisos insuficientes")
            print("   - Error en el backend")
            print("   - Problema de configuraci√≥n")
        
    except Exception as e:
        print(f"\nüí• ERROR EJECUTANDO SCRIPT: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()
