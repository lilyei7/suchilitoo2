"""
Script simple para debuggear la validaci√≥n de componentes.
Usa el servidor de Django y navegador manual.
"""

import django
import os
import sys

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'restaurant.settings')
django.setup()

from restaurant.models import InsumoBasico

def analizar_validacion_js():
    """Analiza el JavaScript de validaci√≥n para encontrar el problema"""
    
    print("üîç Analizando validaci√≥n de componentes...")
    
    # Leer el archivo HTML
    html_file = r"c:\Users\olcha\Desktop\sushi_restaurant\dashboard\templates\dashboard\insumos_compuestos.html"
    
    with open(html_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Extraer la funci√≥n de validaci√≥n
    start_marker = "// Validar que todos los componentes est√©n completos"
    end_marker = "if (!componentesValidos) {"
    
    start_idx = content.find(start_marker)
    end_idx = content.find(end_marker)
    
    if start_idx != -1 and end_idx != -1:
        validation_code = content[start_idx:end_idx + len(end_marker)]
        print("üìã C√≥digo de validaci√≥n encontrado:")
        print(validation_code)
        print("\n" + "="*50 + "\n")
    
    # Buscar problemas potenciales
    problems = []
    
    # 1. Verificar si la validaci√≥n se ejecuta correctamente
    if "componentesValidos = false;" in content:
        problems.append("‚úÖ La validaci√≥n puede marcar componentes como inv√°lidos")
    
    # 2. Verificar la l√≥gica de validaci√≥n
    if "!selectValue || !inputValue || inputNumber <= 0" in content:
        problems.append("‚úÖ Condiciones de validaci√≥n presentes")
    
    # 3. Verificar el mensaje de error
    if "Todos los componentes deben tener insumo y cantidad v√°lida" in content:
        problems.append("‚úÖ Mensaje de error encontrado")
    
    # 4. Buscar posibles problemas
    if "showToast('‚ùå Todos los componentes deben tener insumo y cantidad v√°lida', 'error');" in content:
        # Verificar si hay un return despu√©s
        error_idx = content.find("showToast('‚ùå Todos los componentes deben tener insumo y cantidad v√°lida', 'error');")
        if error_idx != -1:
            # Buscar las siguientes 200 caracteres
            next_code = content[error_idx:error_idx + 200]
            if "return;" in next_code:
                problems.append("‚úÖ Hay return despu√©s del error")
            else:
                problems.append("‚ùå NO hay return despu√©s del error - POSIBLE PROBLEMA")
    
    print("üîç An√°lisis de problemas:")
    for problem in problems:
        print(f"  {problem}")
    
    print("\nüîç Verificando insumos b√°sicos disponibles...")
    insumos = InsumoBasico.objects.all()
    print(f"üì¶ Insumos b√°sicos en DB: {insumos.count()}")
    
    if insumos.count() > 0:
        print("üìã Primeros 5 insumos:")
        for insumo in insumos[:5]:
            print(f"  - {insumo.nombre} ({insumo.categoria}) - ${insumo.precio_unitario}/{insumo.unidad_medida.abreviatura}")
    else:
        print("‚ùå NO HAY INSUMOS B√ÅSICOS - Este podr√≠a ser el problema")
    
    # Buscar el problema espec√≠fico
    print("\nüîç Buscando el problema espec√≠fico en el c√≥digo...")
    
    # Extraer toda la funci√≥n de env√≠o del formulario
    form_start = content.find("document.getElementById('formCrearCompuesto').addEventListener('submit'")
    if form_start != -1:
        # Buscar el final de la funci√≥n (buscar el siguiente event listener o final del script)
        form_end = content.find("});", form_start) + 3
        if form_end > form_start:
            form_code = content[form_start:form_end]
            
            # Buscar la estructura exacta de validaci√≥n
            print("üìã Funci√≥n completa de env√≠o del formulario:")
            lines = form_code.split('\n')
            for i, line in enumerate(lines[:50]):  # Primeras 50 l√≠neas
                if i < 10 or "validar" in line.lower() or "componentes" in line.lower():
                    print(f"{i+1:2d}: {line}")
    
    print("\nüí° Recomendaciones:")
    print("1. Verificar que hay insumos b√°sicos en la base de datos")
    print("2. Verificar en el navegador que los selects se llenan correctamente")
    print("3. Verificar en consola del navegador los valores exactos de los componentes")
    print("4. Usar las herramientas de desarrollador para depurar el JavaScript paso a paso")

if __name__ == "__main__":
    analizar_validacion_js()
