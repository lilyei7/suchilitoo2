#!/usr/bin/env python
"""
Script para diagnosticar y solucionar problemas con usuarios y roles.
Verifica:
1. Que existan todos los roles necesarios
2. Que los roles est√©n activos
3. Que exista al menos un superusuario
4. Que existan sucursales activas
"""
import os
import sys
import django
import json

# Configurar entorno Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sushi_core.settings')
django.setup()

from django.db import transaction
from accounts.models import Usuario, Rol, Sucursal
from django.contrib.auth.hashers import make_password

def verificar_roles():
    """Verifica que existan todos los roles necesarios y est√©n activos"""
    print("\nüîç VERIFICANDO ROLES")
    print("-" * 40)
    
    roles_requeridos = [
        'admin', 'gerente', 'supervisor', 'cajero', 
        'cocinero', 'mesero', 'inventario', 'rrhh'
    ]
    
    roles_existentes = {rol.nombre: rol for rol in Rol.objects.all()}
    roles_faltantes = [nombre for nombre in roles_requeridos if nombre not in roles_existentes]
    roles_inactivos = [rol for rol in Rol.objects.filter(activo=False)]
    
    # Mostrar estado actual
    print(f"Total de roles en BD: {len(roles_existentes)}")
    if roles_faltantes:
        print(f"Roles faltantes: {', '.join(roles_faltantes)}")
    else:
        print("‚úÖ Todos los roles requeridos existen")
    
    if roles_inactivos:
        print(f"Roles inactivos: {', '.join([rol.nombre for rol in roles_inactivos])}")
    else:
        print("‚úÖ Todos los roles est√°n activos")
    
    # Preguntar si arreglar problemas
    if roles_faltantes or roles_inactivos:
        respuesta = input("\n¬øDesea crear los roles faltantes y activar los inactivos? (s/n): ")
        if respuesta.lower() == 's':
            with transaction.atomic():
                # Crear roles faltantes
                for nombre in roles_faltantes:
                    descripcion = f"Rol de {nombre}"
                    rol = Rol.objects.create(
                        nombre=nombre, 
                        descripcion=descripcion,
                        activo=True
                    )
                    print(f"‚úÖ Rol '{nombre}' creado")
                
                # Activar roles inactivos
                for rol in roles_inactivos:
                    rol.activo = True
                    rol.save()
                    print(f"‚úÖ Rol '{rol.nombre}' activado")
            
            print("\n‚úÖ Correcciones aplicadas")
    
    return roles_faltantes, roles_inactivos

def verificar_superusuario():
    """Verifica que exista al menos un superusuario"""
    print("\nüîç VERIFICANDO SUPERUSUARIOS")
    print("-" * 40)
    
    superusers = Usuario.objects.filter(is_superuser=True)
    print(f"Superusuarios encontrados: {superusers.count()}")
    
    if superusers.exists():
        for user in superusers:
            print(f"- {user.username} ({user.email})")
        print("‚úÖ Existe al menos un superusuario")
    else:
        print("‚ùå No hay superusuarios en el sistema")
        respuesta = input("\n¬øDesea crear un superusuario? (s/n): ")
        if respuesta.lower() == 's':
            username = input("Nombre de usuario: ") or 'admin'
            email = input("Email: ") or 'admin@sushirestaurant.com'
            password = input("Contrase√±a: ") or 'admin123456'
            
            try:
                Usuario.objects.create_superuser(
                    username=username,
                    email=email,
                    password=password,
                    first_name='Administrador',
                    last_name='Sistema'
                )
                print(f"‚úÖ Superusuario '{username}' creado exitosamente")
            except Exception as e:
                print(f"‚ùå Error al crear superusuario: {e}")
    
    return superusers.exists()

def verificar_sucursales():
    """Verifica que existan sucursales activas"""
    print("\nüîç VERIFICANDO SUCURSALES")
    print("-" * 40)
    
    sucursales = Sucursal.objects.all()
    sucursales_activas = Sucursal.objects.filter(activa=True)
    
    print(f"Sucursales totales: {sucursales.count()}")
    print(f"Sucursales activas: {sucursales_activas.count()}")
    
    if sucursales.exists():
        for sucursal in sucursales:
            estado = "‚úì Activa" if sucursal.activa else "‚úó Inactiva"
            print(f"- {sucursal.nombre}: {estado}")
    else:
        print("‚ùå No hay sucursales en el sistema")
    
    if not sucursales_activas.exists():
        respuesta = input("\n¬øDesea crear una sucursal? (s/n): ")
        if respuesta.lower() == 's':
            nombre = input("Nombre de la sucursal: ") or 'Sucursal Principal'
            direccion = input("Direcci√≥n: ") or 'Av. Principal #123, Ciudad'
            telefono = input("Tel√©fono: ") or '555-123-4567'
            email = input("Email: ") or 'sucursal@sushirestaurant.com'
            
            try:
                from datetime import date
                sucursal = Sucursal.objects.create(
                    nombre=nombre,
                    direccion=direccion,
                    telefono=telefono,
                    email=email,
                    activa=True,
                    fecha_apertura=date.today()
                )
                print(f"‚úÖ Sucursal '{nombre}' creada exitosamente")
            except Exception as e:
                print(f"‚ùå Error al crear sucursal: {e}")
        elif sucursales.exists():
            respuesta = input("\n¬øDesea activar todas las sucursales existentes? (s/n): ")
            if respuesta.lower() == 's':
                with transaction.atomic():
                    for sucursal in sucursales:
                        sucursal.activa = True
                        sucursal.save()
                    print(f"‚úÖ {sucursales.count()} sucursales activadas")
    
    return sucursales_activas.exists()

def verificar_usuarios_con_rol():
    """Verifica que los usuarios tengan roles asignados"""
    print("\nüîç VERIFICANDO USUARIOS CON ROL")
    print("-" * 40)
    
    usuarios = Usuario.objects.all()
    usuarios_sin_rol = Usuario.objects.filter(rol__isnull=True)
    
    print(f"Total de usuarios: {usuarios.count()}")
    print(f"Usuarios sin rol: {usuarios_sin_rol.count()}")
    
    if usuarios_sin_rol.exists():
        print("\nUsuarios sin rol asignado:")
        for user in usuarios_sin_rol:
            print(f"- {user.username} ({user.get_full_name() or 'Sin nombre'})")
        
        respuesta = input("\n¬øDesea asignar el rol 'admin' a estos usuarios? (s/n): ")
        if respuesta.lower() == 's':
            try:
                rol_admin = Rol.objects.get(nombre='admin')
                with transaction.atomic():
                    for user in usuarios_sin_rol:
                        user.rol = rol_admin
                        user.save()
                    print(f"‚úÖ {usuarios_sin_rol.count()} usuarios ahora tienen rol 'admin'")
            except Rol.DoesNotExist:
                print("‚ùå No existe el rol 'admin'. Ejecute primero la verificaci√≥n de roles.")
            except Exception as e:
                print(f"‚ùå Error al asignar roles: {e}")
    else:
        print("‚úÖ Todos los usuarios tienen un rol asignado")
    
    return usuarios_sin_rol.count()

def verificar_usuarios_con_sucursal():
    """Verifica que los usuarios tengan sucursal asignada"""
    print("\nüîç VERIFICANDO USUARIOS CON SUCURSAL")
    print("-" * 40)
    
    usuarios = Usuario.objects.all()
    usuarios_sin_sucursal = Usuario.objects.filter(sucursal__isnull=True)
    
    print(f"Total de usuarios: {usuarios.count()}")
    print(f"Usuarios sin sucursal: {usuarios_sin_sucursal.count()}")
    
    if usuarios_sin_sucursal.exists() and Sucursal.objects.filter(activa=True).exists():
        print("\nUsuarios sin sucursal asignada:")
        for user in usuarios_sin_sucursal:
            print(f"- {user.username} ({user.get_full_name() or 'Sin nombre'})")
        
        respuesta = input("\n¬øDesea asignar una sucursal a estos usuarios? (s/n): ")
        if respuesta.lower() == 's':
            try:
                sucursal = Sucursal.objects.filter(activa=True).first()
                with transaction.atomic():
                    for user in usuarios_sin_sucursal:
                        user.sucursal = sucursal
                        user.save()
                    print(f"‚úÖ {usuarios_sin_sucursal.count()} usuarios ahora tienen asignada la sucursal '{sucursal.nombre}'")
            except Exception as e:
                print(f"‚ùå Error al asignar sucursales: {e}")
    elif not Sucursal.objects.filter(activa=True).exists():
        print("‚ùå No hay sucursales activas para asignar")
    else:
        print("‚úÖ Todos los usuarios tienen una sucursal asignada")
    
    return usuarios_sin_sucursal.count()

def main():
    """Funci√≥n principal que ejecuta todas las verificaciones"""
    print("\n" + "=" * 50)
    print("üîß DIAGN√ìSTICO DE USUARIOS Y ROLES")
    print("=" * 50)
    
    # Verificar componentes
    roles_faltantes, roles_inactivos = verificar_roles()
    hay_superusuario = verificar_superusuario()
    hay_sucursales = verificar_sucursales()
    usuarios_sin_rol = verificar_usuarios_con_rol()
    usuarios_sin_sucursal = verificar_usuarios_con_sucursal()
    
    # Mostrar resumen
    print("\n" + "=" * 50)
    print("üìä RESUMEN DEL DIAGN√ìSTICO")
    print("=" * 50)
    
    estado_roles = "‚úÖ OK" if not roles_faltantes and not roles_inactivos else "‚ùå Requiere atenci√≥n"
    estado_superusuario = "‚úÖ OK" if hay_superusuario else "‚ùå Requiere atenci√≥n"
    estado_sucursales = "‚úÖ OK" if hay_sucursales else "‚ùå Requiere atenci√≥n"
    estado_usuarios_rol = "‚úÖ OK" if not usuarios_sin_rol else "‚ùå Requiere atenci√≥n"
    estado_usuarios_sucursal = "‚úÖ OK" if not usuarios_sin_sucursal else "‚ùå Requiere atenci√≥n"
    
    print(f"Roles: {estado_roles}")
    print(f"Superusuario: {estado_superusuario}")
    print(f"Sucursales: {estado_sucursales}")
    print(f"Usuarios con rol: {estado_usuarios_rol}")
    print(f"Usuarios con sucursal: {estado_usuarios_sucursal}")
    
    # Recomendaciones finales
    if not hay_superusuario or not hay_sucursales or roles_faltantes or roles_inactivos:
        print("\n‚ö†Ô∏è RECOMENDACI√ìN: Ejecute 'python inicializar_sistema.py' para crear todos los datos b√°sicos")
    
    print("\n¬°Diagn√≥stico completado!")

if __name__ == "__main__":
    main()
