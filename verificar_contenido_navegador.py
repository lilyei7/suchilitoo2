#!/usr/bin/env python
"""
Script para verificar el contenido exacto que se env√≠a al navegador
"""

import os
import django
import sys

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sushi_core.settings')
django.setup()

from django.test import Client
from restaurant.models import ProductoVenta, CategoriaProducto

def verificar_contenido_navegador():
    """Verificar exactamente qu√© contenido se est√° enviando al navegador"""
    print("=" * 80)
    print("VERIFICACI√ìN DETALLADA DEL CONTENIDO DEL MEN√ö")
    print("=" * 80)
    
    client = Client()
    
    # 1. Login con el usuario de prueba
    print("1. Haciendo login...")
    login_data = {
        'username': 'mesero_test',
        'password': '123456'
    }
    
    response = client.post('/mesero/login/', login_data, follow=True)
    if response.status_code != 200:
        print(f"‚ùå Error en login: {response.status_code}")
        return
    
    print("‚úÖ Login exitoso")
    
    # 2. Obtener la p√°gina del men√∫
    print("\n2. Obteniendo p√°gina del men√∫...")
    response = client.get('/mesero/menu/')
    
    if response.status_code != 200:
        print(f"‚ùå Error al obtener men√∫: {response.status_code}")
        return
    
    print(f"‚úÖ P√°gina del men√∫ obtenida (Status: {response.status_code})")
    
    # 3. Verificar productos en la base de datos
    print("\n3. Verificando productos en la base de datos...")
    productos = ProductoVenta.objects.filter(disponible=True)
    print(f"Productos disponibles: {productos.count()}")
    
    for producto in productos:
        categoria = producto.categoria.nombre if producto.categoria else 'Sin Categor√≠a'
        print(f"  - {producto.nombre} (${producto.precio}) - Categor√≠a: {categoria}")
    
    # 4. Analizar el contenido HTML
    print("\n4. Analizando contenido HTML...")
    content = response.content.decode('utf-8')
    
    # Buscar elementos clave
    elementos_clave = [
        ('productos_por_categoria', 'productos_por_categoria' in content),
        ('categoria-header', 'categoria-header' in content),
        ('productos-grid', 'productos-grid' in content),
        ('producto-card', 'producto-card' in content),
        ('btn-agregar', 'btn-agregar' in content),
        ('Edamame', 'Edamame' in content),
        ('Dragon Roll', 'Dragon Roll' in content),
        ('Gyozas', 'Gyozas' in content),
        ('BEBIDAS', 'BEBIDAS' in content),
        ('ENTRADAS', 'ENTRADAS' in content),
    ]
    
    print("Elementos encontrados en el HTML:")
    for elemento, encontrado in elementos_clave:
        estado = "‚úÖ" if encontrado else "‚ùå"
        print(f"  {estado} {elemento}: {encontrado}")
    
    # 5. Buscar errores espec√≠ficos
    print("\n5. Buscando posibles errores...")
    
    errores_posibles = [
        ('Error de template', 'TemplateDoesNotExist' in content or 'TemplateSyntaxError' in content),
        ('Sin productos mensaje', 'Sin productos disponibles' in content),
        ('Error 500', 'Internal Server Error' in content),
        ('Error JavaScript', 'SyntaxError' in content or 'ReferenceError' in content),
        ('CSS no cargado', len([line for line in content.split('\n') if 'style' in line]) < 5),
    ]
    
    for error, presente in errores_posibles:
        if presente:
            print(f"‚ö†Ô∏è  {error}: Detectado")
        else:
            print(f"‚úÖ {error}: No detectado")
    
    # 6. Verificar contexto espec√≠fico
    print("\n6. Verificando estructura del HTML...")
    
    # Contar elementos espec√≠ficos
    count_categoria_headers = content.count('categoria-header')
    count_producto_cards = content.count('producto-card')
    count_btn_agregar = content.count('btn-agregar')
    
    print(f"Encabezados de categor√≠a encontrados: {count_categoria_headers}")
    print(f"Tarjetas de productos encontradas: {count_producto_cards}")
    print(f"Botones agregar encontrados: {count_btn_agregar}")
    
    # 7. Mostrar una muestra del HTML cerca de donde deber√≠an estar los productos
    print("\n7. Muestra del HTML (√°rea de productos)...")
    if 'menu-container' in content:
        inicio = content.find('menu-container')
        fin = min(inicio + 1000, len(content))
        muestra = content[inicio:fin]
        print("HTML alrededor del menu-container:")
        print("-" * 40)
        print(muestra[:500] + "..." if len(muestra) > 500 else muestra)
        print("-" * 40)
    else:
        print("‚ùå No se encontr√≥ 'menu-container' en el HTML")
    
    # 8. Verificar si hay JavaScript errors
    print("\n8. Verificando JavaScript...")
    if 'agregarProducto' in content:
        print("‚úÖ Funci√≥n agregarProducto encontrada")
    else:
        print("‚ùå Funci√≥n agregarProducto NO encontrada")
    
    # 9. Resumen final
    print("\n" + "=" * 80)
    print("RESUMEN DEL DIAGN√ìSTICO")
    print("=" * 80)
    
    if count_producto_cards > 0:
        print(f"‚úÖ Se encontraron {count_producto_cards} tarjetas de productos")
        print("‚úÖ El problema podr√≠a ser visual (CSS) o JavaScript")
        print("\nüîß POSIBLES SOLUCIONES:")
        print("   1. Abre las herramientas de desarrollador (F12)")
        print("   2. Ve a la pesta√±a 'Console' para ver errores JavaScript")
        print("   3. Ve a la pesta√±a 'Network' para ver si faltan archivos CSS/JS")
        print("   4. Verifica que los estilos CSS se est√©n aplicando")
    else:
        print("‚ùå NO se encontraron tarjetas de productos en el HTML")
        print("‚ùå El problema est√° en el backend (views.py o template)")
        print("\nüîß POSIBLES SOLUCIONES:")
        print("   1. Verificar que la vista obtener_productos_menu() funcione")
        print("   2. Verificar que el template reciba productos_por_categoria")
        print("   3. Revisar errores en el servidor Django")
    
    print(f"\nüìè Tama√±o total del HTML: {len(content)} caracteres")
    print(f"üìä Productos en BD: {productos.count()}")
    
    # 10. Guardar HTML para inspecci√≥n manual
    print("\n10. Guardando HTML para inspecci√≥n...")
    with open('menu_debug.html', 'w', encoding='utf-8') as f:
        f.write(content)
    print("‚úÖ HTML guardado en 'menu_debug.html' para inspecci√≥n manual")

if __name__ == '__main__':
    verificar_contenido_navegador()
