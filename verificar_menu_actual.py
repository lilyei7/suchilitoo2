#!/usr/bin/env python
"""
Script para verificar el estado actual del men√∫ del mesero
Muestra los productos activos organizados por categor√≠a tal como los ver√≠a el mesero
"""

import os
import django
import sys

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sushi_core.settings')
django.setup()

from restaurant.models import ProductoVenta, CategoriaProducto
from collections import defaultdict

def verificar_menu_mesero():
    """Verificar exactamente lo que ve el mesero en el men√∫"""
    print("=" * 60)
    print("VERIFICACI√ìN DEL MEN√ö DEL MESERO")
    print("=" * 60)
    
    # Obtener productos exactamente como lo hace la funci√≥n obtener_productos_menu()
    productos_activos = ProductoVenta.objects.filter(
        disponible=True  # Solo productos disponibles/activos
    ).select_related('categoria').order_by('categoria__orden', 'categoria__nombre', 'nombre')
    
    print(f"Total de productos activos en DB: {productos_activos.count()}")
    
    # Organizar productos por categor√≠a (igual que en la funci√≥n)
    productos_por_categoria = defaultdict(list)
    
    for producto in productos_activos:
        categoria_nombre = producto.categoria.nombre if producto.categoria else 'Sin Categor√≠a'
        productos_por_categoria[categoria_nombre].append(producto)
    
    # Mostrar el men√∫ organizado
    if productos_por_categoria:
        print(f"\nCategor√≠as encontradas: {len(productos_por_categoria)}")
        print("\nMEN√ö ORGANIZADO POR CATEGOR√çAS:")
        print("-" * 40)
        
        for categoria, productos in productos_por_categoria.items():
            print(f"\nüìÇ {categoria.upper()} ({len(productos)} productos)")
            for i, producto in enumerate(productos, 1):
                precio = float(producto.precio)
                disponible_txt = "‚úÖ DISPONIBLE" if producto.disponible else "‚ùå NO DISPONIBLE"
                print(f"  {i}. {producto.nombre}")
                print(f"     üí∞ ${precio:.2f} | {disponible_txt}")
                if producto.descripcion:
                    print(f"     üìù {producto.descripcion[:50]}...")
                print()
    else:
        print("\n‚ö†Ô∏è  NO HAY PRODUCTOS ACTIVOS EN EL MEN√ö")
        print("El mesero ver√° un mensaje de 'Sin productos disponibles'")
    
    # Verificar productos inactivos tambi√©n
    productos_inactivos = ProductoVenta.objects.filter(disponible=False).count()
    print(f"\nProductos inactivos (no mostrados): {productos_inactivos}")
    
    # Verificar categor√≠as
    categorias_total = CategoriaProducto.objects.count()
    categorias_con_productos = CategoriaProducto.objects.filter(
        productos_venta__disponible=True
    ).distinct().count()
    
    print(f"\nCategor√≠as totales: {categorias_total}")
    print(f"Categor√≠as con productos activos: {categorias_con_productos}")
    
    print("\n" + "=" * 60)
    print("RESULTADO: El men√∫ del mesero est√° configurado para mostrar")
    print("√öNICAMENTE productos activos (disponible=True) de la base de datos,")
    print("organizados por categor√≠a. ‚úÖ")
    print("=" * 60)

if __name__ == '__main__':
    verificar_menu_mesero()
