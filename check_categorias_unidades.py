#!/usr/bin/env python3
"""
Script para verificar la funcionalidad de creaci√≥n de categor√≠as y unidades
"""
import os
import sys
import django

# Configurar el entorno de Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sushi_core.settings')
django.setup()

from django.template.loader import get_template
from django.contrib.auth import get_user_model
from restaurant.models import CategoriaInsumo, UnidadMedida

def verificar_modales():
    """Verificar si los modales est√°n presentes en el template"""
    print("üîç VERIFICANDO MODALES EN TEMPLATE")
    print("=" * 60)
    
    try:
        template = get_template('dashboard/inventario.html')
        content = template.template.source
        
        # Verificar modal de categor√≠a
        if 'nuevaCategoriaModal' in content:
            print("‚úÖ Modal de categor√≠a encontrado")
            
            # Verificar formulario
            if 'nuevaCategoriaForm' in content:
                print("   ‚úÖ Formulario de categor√≠a encontrado")
            else:
                print("   ‚ùå Formulario de categor√≠a NO encontrado")
        else:
            print("‚ùå Modal de categor√≠a NO encontrado")
        
        # Verificar modal de unidad
        if 'nuevaUnidadModal' in content:
            print("‚úÖ Modal de unidad encontrado")
            
            # Verificar formulario
            if 'nuevaUnidadForm' in content:
                print("   ‚úÖ Formulario de unidad encontrado")
            else:
                print("   ‚ùå Formulario de unidad NO encontrado")
        else:
            print("‚ùå Modal de unidad NO encontrado")
        
        # Verificar JS
        if 'crearCategoria' in content:
            print("‚úÖ Funci√≥n crearCategoria encontrada en template")
        else:
            print("‚ùå Funci√≥n crearCategoria NO encontrada en template")
        
        if 'crearUnidadMedida' in content:
            print("‚úÖ Funci√≥n crearUnidadMedida encontrada en template")
        else:
            print("‚ùå Funci√≥n crearUnidadMedida NO encontrada en template")
    
    except Exception as e:
        print(f"‚ùå Error al verificar template: {str(e)}")

def verificar_script():
    """Verificar si el archivo de script existe"""
    print("\nüîç VERIFICANDO ARCHIVOS JS")
    print("=" * 60)
      script_path = os.path.join('dashboard', 'static', 'dashboard', 'js', 'categorias_unidades.js')
    if os.path.exists(script_path):
        print(f"‚úÖ Script encontrado: {script_path}")
        
        try:
            with open(script_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
                # Verificar funciones
                if 'function crearCategoria()' in content:
                    print("   ‚úÖ Funci√≥n crearCategoria() definida")
                else:
                    print("   ‚ùå Funci√≥n crearCategoria() NO definida")
                
                if 'function crearUnidadMedida()' in content:
                    print("   ‚úÖ Funci√≥n crearUnidadMedida() definida")
                else:
                    print("   ‚ùå Funci√≥n crearUnidadMedida() NO definida")
                
                # Verificar eventos
                if 'formCategoria.addEventListener' in content:
                    print("   ‚úÖ Evento para formulario de categor√≠a configurado")
                else:
                    print("   ‚ùå Evento para formulario de categor√≠a NO configurado")
                
                if 'formUnidad.addEventListener' in content:
                    print("   ‚úÖ Evento para formulario de unidad configurado")
                else:
                    print("   ‚ùå Evento para formulario de unidad NO configurado")
        except Exception as e:
            print(f"   ‚ùå Error al leer el archivo: {str(e)}")
    else:
        print(f"‚ùå Script NO encontrado: {script_path}")

def verificar_vistas():
    """Verificar si las vistas est√°n definidas"""
    print("\nüîç VERIFICANDO VISTAS")
    print("=" * 60)
    
    views_path = os.path.join('dashboard', 'views', 'categorias_unidades_views.py')
    if os.path.exists(views_path):
        print(f"‚úÖ Archivo de vistas encontrado: {views_path}")
        
        # Verificar funciones
        with open(views_path, 'r') as f:
            content = f.read()
            
            if 'def crear_categoria(' in content:
                print("   ‚úÖ Vista crear_categoria definida")
            else:
                print("   ‚ùå Vista crear_categoria NO definida")
            
            if 'def crear_unidad(' in content:
                print("   ‚úÖ Vista crear_unidad definida")
            else:
                print("   ‚ùå Vista crear_unidad NO definida")
            
            if 'def listar_categorias(' in content:
                print("   ‚úÖ Vista listar_categorias definida")
            else:
                print("   ‚ùå Vista listar_categorias NO definida")
            
            if 'def listar_unidades(' in content:
                print("   ‚úÖ Vista listar_unidades definida")
            else:
                print("   ‚ùå Vista listar_unidades NO definida")
    else:
        print(f"‚ùå Archivo de vistas NO encontrado: {views_path}")

def verificar_urls():
    """Verificar si las URLs est√°n configuradas"""
    print("\nüîç VERIFICANDO URLS")
    print("=" * 60)
    
    urls_path = os.path.join('dashboard', 'urls.py')
    if os.path.exists(urls_path):
        print(f"‚úÖ Archivo de URLs encontrado: {urls_path}")
        
        with open(urls_path, 'r') as f:
            content = f.read()
            
            # Verificar importaci√≥n
            if 'from .views import categorias_unidades_views' in content:
                print("   ‚úÖ Importaci√≥n de vistas encontrada")
            else:
                print("   ‚ùå Importaci√≥n de vistas NO encontrada")
            
            # Verificar rutas
            urls_to_check = [
                "path('categorias/crear/'",
                "path('categorias/listar/'",
                "path('unidades/crear/'",
                "path('unidades/listar/'"
            ]
            
            for url in urls_to_check:
                if url in content:
                    print(f"   ‚úÖ URL encontrada: {url}")
                else:
                    print(f"   ‚ùå URL NO encontrada: {url}")
    else:
        print(f"‚ùå Archivo de URLs NO encontrado: {urls_path}")

def verificar_modelos():
    """Verificar si los modelos existen y est√°n funcionando"""
    print("\nüîç VERIFICANDO MODELOS")
    print("=" * 60)
    
    # Verificar CategoriaInsumo
    try:
        categorias_count = CategoriaInsumo.objects.count()
        print(f"‚úÖ Modelo CategoriaInsumo disponible ({categorias_count} registros)")
        
        # Mostrar algunas categor√≠as
        if categorias_count > 0:
            categorias = CategoriaInsumo.objects.all()[:5]
            print("   Ejemplos de categor√≠as:")
            for cat in categorias:
                print(f"   - {cat.nombre}")
    except Exception as e:
        print(f"‚ùå Error al verificar CategoriaInsumo: {str(e)}")
    
    # Verificar UnidadMedida
    try:
        unidades_count = UnidadMedida.objects.count()
        print(f"‚úÖ Modelo UnidadMedida disponible ({unidades_count} registros)")
        
        # Mostrar algunas unidades
        if unidades_count > 0:
            unidades = UnidadMedida.objects.all()[:5]
            print("   Ejemplos de unidades:")
            for unidad in unidades:
                print(f"   - {unidad.nombre} ({unidad.abreviacion})")
    except Exception as e:
        print(f"‚ùå Error al verificar UnidadMedida: {str(e)}")

def main():
    print("üîç VERIFICACI√ìN DE FUNCIONALIDAD DE CATEGOR√çAS Y UNIDADES")
    print("=" * 60)
    
    verificar_modales()
    verificar_script()
    verificar_vistas()
    verificar_urls()
    verificar_modelos()
    
    print("\n‚úÖ VERIFICACI√ìN COMPLETADA")
    print("=" * 60)
    print("Para probar la funcionalidad:")
    print("1. Inicia el servidor con: python manage.py runserver")
    print("2. Accede a la p√°gina de inventario")
    print("3. Intenta crear una categor√≠a y una unidad")
    print("4. Verifica que se muestren las notificaciones de √©xito")

if __name__ == "__main__":
    main()
