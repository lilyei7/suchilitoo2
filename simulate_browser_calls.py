#!/usr/bin/env python3
"""
Simulaci√≥n exacta de las llamadas JavaScript de proveedores
"""

import requests
import json

def simulate_browser_calls():
    """Simular exactamente las llamadas que hace el navegador"""
    print("=== SIMULACI√ìN DE LLAMADAS DEL NAVEGADOR ===\n")
    
    base_url = "http://127.0.0.1:8001"
    
    # Crear sesi√≥n para mantener cookies
    session = requests.Session()
    
    # 1. Login completo
    print("1. Login completo...")
    login_response = session.get(f"{base_url}/dashboard/login/")
    csrf_token = None
    for line in login_response.text.split('\n'):
        if 'csrfmiddlewaretoken' in line and 'value=' in line:
            start = line.find('value="') + 7
            end = line.find('"', start)
            csrf_token = line[start:end]
            break
    
    login_data = {
        'username': 'admin_test',
        'password': '123456',
        'csrfmiddlewaretoken': csrf_token
    }
    
    session.post(f"{base_url}/dashboard/login/", data=login_data)
    
    # 2. Cargar p√°gina de proveedores
    print("\n2. Cargando p√°gina de proveedores...")
    proveedores_response = session.get(f"{base_url}/dashboard/proveedores/")
    
    # Obtener nuevo CSRF token de la p√°gina
    csrf_token = None
    for line in proveedores_response.text.split('\n'):
        if 'csrfmiddlewaretoken' in line and 'value=' in line:
            start = line.find('value="') + 7
            end = line.find('"', start)
            csrf_token = line[start:end]
            break
    
    # 3. Obtener proveedores disponibles
    import os
    import django
    import sys
    
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sushi_core.settings')
    django.setup()
    
    from dashboard.models import Proveedor
    proveedores = Proveedor.objects.all()[:3]  # Probar con los primeros 3
    
    print(f"Proveedores a probar: {[p.id for p in proveedores]}")
    
    for proveedor in proveedores:
        print(f"\n--- PROBANDO PROVEEDOR ID {proveedor.id} ---")
        
        # 3a. Simular verDetalleProveedor()
        print(f"üìã Ver Detalles:")
        detalle_url = f"{base_url}/dashboard/proveedor/{proveedor.id}/detalle/"
        
        # Headers que env√≠a el navegador
        headers = {
            'Accept': 'application/json, text/plain, */*',
            'X-Requested-With': 'XMLHttpRequest',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        
        detalle_response = session.get(detalle_url, headers=headers)
        print(f"   Status: {detalle_response.status_code}")
        print(f"   Content-Type: {detalle_response.headers.get('content-type')}")
        
        if detalle_response.status_code == 200:
            try:
                detalle_data = detalle_response.json()
                print(f"   ‚úÖ JSON v√°lido - Success: {detalle_data.get('success')}")
            except Exception as e:
                print(f"   ‚ùå Error JSON: {e}")
                print(f"   Contenido: {detalle_response.text[:150]}...")
        else:
            print(f"   ‚ùå Error HTTP: {detalle_response.status_code}")
        
        # 3b. Simular editarProveedor() - solo cargar datos
        print(f"‚úèÔ∏è  Editar (cargar datos):")
        # Usa la misma URL que ver detalles
        editar_response = session.get(detalle_url, headers=headers)
        print(f"   Status: {editar_response.status_code}")
        
        if editar_response.status_code == 200:
            try:
                editar_data = editar_response.json()
                print(f"   ‚úÖ Datos para edici√≥n - Success: {editar_data.get('success')}")
            except Exception as e:
                print(f"   ‚ùå Error JSON: {e}")
        
        # 3c. Simular eliminarProveedor() - sin eliminar realmente
        print(f"üóëÔ∏è  Eliminar (verificar endpoint):")
        eliminar_url = f"{base_url}/dashboard/proveedor/{proveedor.id}/eliminar/"
        
        # Solo hacer GET para verificar que la ruta existe
        eliminar_response = session.get(eliminar_url, headers=headers)
        print(f"   Status GET: {eliminar_response.status_code}")
        
        if eliminar_response.status_code == 405:
            print(f"   ‚úÖ M√©todo no permitido (correcto para GET)")
        elif eliminar_response.status_code == 200:
            try:
                eliminar_data = eliminar_response.json()
                print(f"   ‚ö†Ô∏è  Respuesta inesperada: {eliminar_data}")
            except:
                print(f"   ‚ö†Ô∏è  GET permitido pero respuesta no JSON")
        else:
            print(f"   ‚ùå Error inesperado: {eliminar_response.status_code}")
    
    print(f"\nüéØ RESUMEN DE SIMULACI√ìN:")
    print(f"‚úì Login exitoso")
    print(f"‚úì P√°gina de proveedores carga")
    print(f"‚úì Endpoints de detalle responden JSON")
    print(f"‚úì Rutas configuradas correctamente")
    
    print(f"\nüí° POSIBLES CAUSAS DEL ERROR ORIGINAL:")
    print(f"1. Error era de un proveedor espec√≠fico (ID 40) que ya no existe")
    print(f"2. Cache del navegador con JavaScript antiguo")
    print(f"3. URLs llamadas desde otro puerto (8000 vs 8001)")
    print(f"4. Error temporal ya resuelto")

if __name__ == '__main__':
    simulate_browser_calls()
