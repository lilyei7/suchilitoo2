#!/usr/bin/env python
"""
Script para actualizar los permisos por defecto de los roles existentes
Este script actualiza el campo 'permisos' de cada rol con la estructura definida en RBAC
"""
import os
import sys
import django
import json

# Configurar el entorno de Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sushi_core.settings')
django.setup()

from accounts.models import Rol, Usuario
from django.db import transaction
from dashboard.utils.permissions import DEFAULT_ROLE_PERMISSIONS, invalidate_user_permissions

def actualizar_permisos_roles():
    """
    Actualiza los permisos de todos los roles existentes con la estructura RBAC
    """
    print("=" * 60)
    print("üîß ACTUALIZANDO PERMISOS DE ROLES CON ESTRUCTURA RBAC")
    print("=" * 60)
    
    # Obtener todos los roles activos
    roles = Rol.objects.filter(activo=True)
    
    if not roles.exists():
        print("‚ùå No se encontraron roles activos en el sistema")
        return False
    
    print(f"üìã Roles encontrados: {roles.count()}")
    for rol in roles:
        print(f"   - {rol.get_nombre_display()} ({rol.nombre})")
    
    # Confirmar actualizaci√≥n
    print("\n‚ö†Ô∏è  ADVERTENCIA: Este proceso actualizar√° los permisos de todos los roles.")
    print("‚ö†Ô∏è  Los permisos personalizados se perder√°n y se usar√°n los por defecto.")
    
    respuesta = input("\n¬øDesea continuar? (escriba 'SI' para confirmar): ")
    
    if respuesta != "SI":
        print("‚ùå Operaci√≥n cancelada por el usuario")
        return False
    
    # Procesar cada rol
    roles_actualizados = 0
    usuarios_afectados = []
    
    try:
        with transaction.atomic():
            for rol in roles:
                # Obtener permisos por defecto para este rol
                permisos_default = DEFAULT_ROLE_PERMISSIONS.get(rol.nombre)
                
                if permisos_default:
                    # Guardar estado anterior para comparaci√≥n
                    permisos_anteriores = rol.permisos
                    
                    # Actualizar permisos
                    rol.permisos = permisos_default
                    rol.save()
                    
                    print(f"\n‚úÖ Rol '{rol.get_nombre_display()}' actualizado:")
                    print(f"   üìÅ M√≥dulos: {len([m for m, access in permisos_default.get('modules', {}).items() if access])}")
                    print(f"   üîß Acciones: {list(permisos_default.get('actions', {}).keys())}")
                    print(f"   ‚≠ê Caracter√≠sticas: {len([f for f, enabled in permisos_default.get('features', {}).items() if enabled])}")
                    
                    roles_actualizados += 1
                    
                    # Obtener usuarios con este rol
                    usuarios_con_rol = Usuario.objects.filter(rol=rol, is_active=True)
                    usuarios_afectados.extend(usuarios_con_rol)
                    
                    if usuarios_con_rol.exists():
                        print(f"   üë• Usuarios afectados: {usuarios_con_rol.count()}")
                        for usuario in usuarios_con_rol:
                            print(f"      - {usuario.username} ({usuario.get_full_name() or 'Sin nombre'})")
                    
                else:
                    print(f"\n‚ö†Ô∏è  Rol '{rol.get_nombre_display()}' no tiene permisos definidos en DEFAULT_ROLE_PERMISSIONS")
                    print(f"    Se mantienen los permisos actuales: {rol.permisos}")
            
            # Invalidar cache de permisos para todos los usuarios afectados
            print(f"\nüîÑ Invalidando cache de permisos para {len(usuarios_afectados)} usuarios...")
            for usuario in usuarios_afectados:
                invalidate_user_permissions(usuario)
            
            print(f"\n‚úÖ ACTUALIZACI√ìN COMPLETADA")
            print(f"   üìä Roles actualizados: {roles_actualizados}")
            print(f"   üë• Usuarios afectados: {len(usuarios_afectados)}")
            
            return True
            
    except Exception as e:
        print(f"\n‚ùå Error durante la actualizaci√≥n: {e}")
        return False

def mostrar_resumen_permisos():
    """
    Muestra un resumen de los permisos configurados por rol
    """
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE PERMISOS POR ROL")
    print("=" * 60)
    
    for rol_nombre, permisos in DEFAULT_ROLE_PERMISSIONS.items():
        print(f"\nüîπ ROL: {rol_nombre.upper()}")
        print("-" * 40)
        
        # M√≥dulos
        modulos = permisos.get('modules', {})
        modulos_activos = [m for m, access in modulos.items() if access]
        print(f"üìÅ M√≥dulos ({len(modulos_activos)}): {', '.join(modulos_activos)}")
        
        # Acciones
        acciones = permisos.get('actions', {})
        print("üîß Acciones:")
        for accion, modulos_permitidos in acciones.items():
            if modulos_permitidos:
                if '*' in modulos_permitidos:
                    print(f"   {accion}: Todos los m√≥dulos")
                else:
                    print(f"   {accion}: {', '.join(modulos_permitidos)}")
        
        # Caracter√≠sticas
        caracteristicas = permisos.get('features', {})
        caracteristicas_activas = [f for f, enabled in caracteristicas.items() if enabled]
        print(f"‚≠ê Caracter√≠sticas ({len(caracteristicas_activas)}): {', '.join(caracteristicas_activas)}")

def verificar_estructura_permisos():
    """
    Verifica que todos los roles en la BD tengan la estructura de permisos correcta
    """
    print("\n" + "=" * 60)
    print("üîç VERIFICANDO ESTRUCTURA DE PERMISOS")
    print("=" * 60)
    
    roles = Rol.objects.filter(activo=True)
    problemas_encontrados = []
    
    for rol in roles:
        print(f"\nüîπ Verificando rol: {rol.get_nombre_display()}")
        
        if not rol.permisos:
            print("   ‚ùå Sin permisos configurados")
            problemas_encontrados.append(f"Rol {rol.nombre} sin permisos")
            continue
        
        # Verificar estructura
        estructura_esperada = ['modules', 'actions', 'features']
        estructura_actual = list(rol.permisos.keys())
        
        for seccion in estructura_esperada:
            if seccion not in estructura_actual:
                print(f"   ‚ùå Falta secci√≥n: {seccion}")
                problemas_encontrados.append(f"Rol {rol.nombre} falta secci√≥n {seccion}")
            else:
                print(f"   ‚úÖ Secci√≥n {seccion}: OK")
        
        # Verificar que tenga al menos acceso al dashboard
        if rol.permisos.get('modules', {}).get('dashboard', False):
            print("   ‚úÖ Acceso al dashboard: OK")
        else:
            print("   ‚ö†Ô∏è  Sin acceso al dashboard")
            problemas_encontrados.append(f"Rol {rol.nombre} sin acceso al dashboard")
    
    if problemas_encontrados:
        print(f"\n‚ö†Ô∏è  PROBLEMAS ENCONTRADOS ({len(problemas_encontrados)}):")
        for problema in problemas_encontrados:
            print(f"   - {problema}")
        return False
    else:
        print(f"\n‚úÖ Todos los roles tienen estructura correcta")
        return True

def menu_principal():
    """
    Men√∫ principal del script
    """
    while True:
        print("\n" + "=" * 60)
        print("üîß GESTI√ìN DE PERMISOS DE ROLES")
        print("=" * 60)
        print("1. üìä Mostrar resumen de permisos por defecto")
        print("2. üîç Verificar estructura de permisos actuales")
        print("3. üîÑ Actualizar permisos de roles existentes")
        print("4. üö™ Salir")
        print("-" * 60)
        
        opcion = input("Seleccione una opci√≥n (1-4): ").strip()
        
        if opcion == "1":
            mostrar_resumen_permisos()
        elif opcion == "2":
            verificar_estructura_permisos()
        elif opcion == "3":
            if actualizar_permisos_roles():
                print("\nüéâ ¬°Permisos actualizados exitosamente!")
                print("üí° Los usuarios necesitar√°n volver a iniciar sesi√≥n para ver los cambios.")
            else:
                print("\n‚ùå La actualizaci√≥n no se complet√≥ correctamente.")
        elif opcion == "4":
            print("\nüëã ¬°Hasta luego!")
            break
        else:
            print("\n‚ùå Opci√≥n no v√°lida. Por favor seleccione 1-4.")
        
        input("\nPresione Enter para continuar...")

if __name__ == "__main__":
    print("üöÄ Iniciando gesti√≥n de permisos de roles...")
    menu_principal()
