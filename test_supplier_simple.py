#!/usr/bin/env python
"""
Script simple para probar la funcionalidad del formulario de proveedores
"""
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sushi_core.settings')
django.setup()

from dashboard.models import Proveedor
from django.contrib.auth import get_user_model
from django.contrib.auth.hashers import make_password
from django.test import Client
from django.urls import reverse
import json

User = get_user_model()

def create_test_user():
    """Crea un usuario de prueba"""
    try:
        # Eliminar usuario de prueba si existe
        User.objects.filter(username='test_supplier').delete()
        
        # Crear nuevo usuario de prueba
        user = User.objects.create(
            username='test_supplier',
            password=make_password('test123'),
            is_active=True,
            is_staff=True,
            is_superuser=True
        )
        return user
    except Exception as e:
        print(f"Error creando usuario: {e}")
        return None

def test_supplier_creation():
    """Prueba la creaci√≥n de proveedores usando Django Test Client"""
    
    print("=== PROBANDO CREACI√ìN DE PROVEEDORES ===\n")
    
    # Crear usuario de prueba
    user = create_test_user()
    if not user:
        print("‚ùå No se pudo crear usuario de prueba")
        return False
    
    print("‚úÖ Usuario de prueba creado")
    
    # Crear cliente de Django
    client = Client()
    
    # Hacer login
    login_success = client.login(username='test_supplier', password='test123')
    if not login_success:
        print("‚ùå No se pudo hacer login")
        return False
    
    print("‚úÖ Login exitoso")    # Datos de prueba
    test_data = {
        'nombre_comercial': 'Proveedor Test Django',
        'razon_social': 'Proveedor Test S.A. de C.V.',
        'rfc': 'XAXX010101000',  # RFC v√°lido de ejemplo
        'persona_contacto': 'Juan P√©rez Test',
        'telefono': '+52 55 1234-5678',
        'email': 'test@proveedor.com',
        'forma_pago_preferida': 'transferencia',
        'dias_credito': '30',
        'direccion': 'Av. Test 123',
        'ciudad_estado': 'Ciudad de M√©xico, CDMX',
        'categoria_productos': 'ingredientes',
        'notas_adicionales': 'Proveedor creado mediante test automatizado'
    }
    
    # Contar proveedores antes
    proveedores_antes = Proveedor.objects.count()
    print(f"Proveedores antes: {proveedores_antes}")
    
    # Enviar solicitud POST
    response = client.post(
        reverse('dashboard:crear_proveedor'),
        data=test_data,
        HTTP_X_REQUESTED_WITH='XMLHttpRequest'
    )
    
    print(f"Status code: {response.status_code}")
    
    if response.status_code == 200:
        try:
            result = response.json()
            print(f"Respuesta: {json.dumps(result, indent=2)}")
            
            if result.get('success'):
                print("‚úÖ API respondi√≥ exitosamente")
                
                # Verificar en base de datos
                proveedores_despues = Proveedor.objects.count()
                print(f"Proveedores despu√©s: {proveedores_despues}")
                
                if proveedores_despues > proveedores_antes:
                    print("‚úÖ Proveedor creado exitosamente en la base de datos")
                    
                    # Verificar datos espec√≠ficos
                    nuevo_proveedor = Proveedor.objects.filter(
                        nombre_comercial='Proveedor Test Django'
                    ).first()
                    
                    if nuevo_proveedor:
                        print("\nüìã Datos del proveedor creado:")
                        print(f"   - ID: {nuevo_proveedor.id}")
                        print(f"   - Nombre comercial: {nuevo_proveedor.nombre_comercial}")
                        print(f"   - Raz√≥n social: {nuevo_proveedor.razon_social}")
                        print(f"   - RFC: {nuevo_proveedor.rfc}")
                        print(f"   - Email: {nuevo_proveedor.email}")
                        print(f"   - Tel√©fono: {nuevo_proveedor.telefono}")
                        print(f"   - Estado: {nuevo_proveedor.estado}")
                        print(f"   - Forma de pago: {nuevo_proveedor.forma_pago_preferida}")
                        print(f"   - D√≠as de cr√©dito: {nuevo_proveedor.dias_credito}")
                        
                        # Limpiar - eliminar proveedor de prueba
                        nuevo_proveedor.delete()
                        print("\nüßπ Proveedor de prueba eliminado")
                        
                        # Limpiar usuario de prueba
                        user.delete()
                        print("üßπ Usuario de prueba eliminado")
                        
                        return True
                    else:
                        print("‚ùå No se pudo encontrar el proveedor creado")
                else:
                    print("‚ùå El proveedor no se cre√≥ en la base de datos")
            else:
                print(f"‚ùå API retorn√≥ error: {result.get('message', 'Error desconocido')}")
                if 'errors' in result:
                    print(f"   Errores espec√≠ficos: {result['errors']}")
                    
        except json.JSONDecodeError as e:
            print(f"‚ùå Error al parsear respuesta JSON: {e}")
            print(f"   Respuesta cruda: {response.content.decode()[:500]}")
            
    else:
        print(f"‚ùå Error HTTP: {response.status_code}")
        print(f"   Respuesta: {response.content.decode()[:500]}")
    
    # Limpiar usuario de prueba
    try:
        user.delete()
    except:
        pass
        
    return False

def test_validations():
    """Prueba las validaciones del formulario"""
    
    print("\n=== PROBANDO VALIDACIONES ===\n")
    
    # Crear usuario de prueba
    user = create_test_user()
    if not user:
        print("‚ùå No se pudo crear usuario de prueba")
        return False
    
    client = Client()
    client.login(username='test_supplier', password='test123')
    
    success_count = 0
    
    # Prueba 1: Campo requerido vac√≠o
    print("1. Probando campo requerido vac√≠o...")
    response = client.post(
        reverse('dashboard:crear_proveedor'),
        data={'nombre_comercial': ''},  # Campo requerido vac√≠o
        HTTP_X_REQUESTED_WITH='XMLHttpRequest'
    )
    
    if response.status_code == 200:
        result = response.json()
        if not result.get('success') and 'nombre_comercial' in result.get('errors', {}):
            print("‚úÖ Validaci√≥n de campo requerido funciona")
            success_count += 1
        else:
            print(f"‚ùå Validaci√≥n de campo requerido fall√≥: {result}")
    
    # Prueba 2: RFC inv√°lido
    print("2. Probando RFC inv√°lido...")
    response = client.post(
        reverse('dashboard:crear_proveedor'),
        data={
            'nombre_comercial': 'Test RFC',
            'rfc': 'INVALID_RFC'  # RFC inv√°lido
        },
        HTTP_X_REQUESTED_WITH='XMLHttpRequest'
    )
    
    if response.status_code == 200:
        result = response.json()
        if not result.get('success') and 'rfc' in result.get('errors', {}):
            print("‚úÖ Validaci√≥n de RFC funciona")
            success_count += 1
        else:
            print(f"‚ùå Validaci√≥n de RFC fall√≥: {result}")
    
    # Prueba 3: Email inv√°lido
    print("3. Probando email inv√°lido...")
    response = client.post(
        reverse('dashboard:crear_proveedor'),
        data={
            'nombre_comercial': 'Test Email',
            'email': 'invalid-email'  # Email inv√°lido
        },
        HTTP_X_REQUESTED_WITH='XMLHttpRequest'
    )
    
    if response.status_code == 200:
        result = response.json()
        if not result.get('success') and 'email' in result.get('errors', {}):
            print("‚úÖ Validaci√≥n de email funciona")
            success_count += 1
        else:
            print(f"‚ùå Validaci√≥n de email fall√≥: {result}")
    
    # Limpiar usuario de prueba
    try:
        user.delete()
    except:
        pass
    
    return success_count == 3

def check_database_model():
    """Verifica el modelo de base de datos"""
    
    print("=== VERIFICANDO MODELO DE BASE DE DATOS ===\n")
    
    try:
        # Verificar que el modelo existe y tiene los campos esperados
        from django.db import connection
        
        with connection.cursor() as cursor:
            cursor.execute("PRAGMA table_info(dashboard_proveedor);")
            columns = cursor.fetchall()
            
        field_names = [col[1] for col in columns]
        
        expected_fields = [
            'id', 'nombre_comercial', 'razon_social', 'rfc', 'persona_contacto',
            'telefono', 'email', 'forma_pago_preferida', 'dias_credito',
            'direccion', 'ciudad_estado', 'categoria_productos', 'notas_adicionales',
            'estado', 'fecha_registro'
        ]
        
        print("üìã Campos en la tabla:")
        for field in field_names:
            status = "‚úÖ" if field in expected_fields else "‚ùì"
            print(f"   {status} {field}")
        
        missing_fields = [field for field in expected_fields if field not in field_names]
        if missing_fields:
            print(f"\n‚ùå Campos faltantes: {missing_fields}")
            return False
        else:
            print("\n‚úÖ Todos los campos esperados est√°n presentes")
            return True
            
    except Exception as e:
        print(f"‚ùå Error al verificar modelo: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ INICIANDO PRUEBAS DEL SISTEMA DE PROVEEDORES\n")
    
    # Ejecutar pruebas
    db_ok = check_database_model()
    creation_ok = test_supplier_creation()
    validation_ok = test_validations()
    
    # Resumen
    print("\n" + "="*60)
    print("RESUMEN DE PRUEBAS:")
    print("="*60)
    print(f"üìä Modelo de BD:     {'‚úÖ OK' if db_ok else '‚ùå ERROR'}")
    print(f"üîó Creaci√≥n:         {'‚úÖ OK' if creation_ok else '‚ùå ERROR'}")
    print(f"üõ°Ô∏è Validaciones:     {'‚úÖ OK' if validation_ok else '‚ùå ERROR'}")
    print("="*60)
    
    if all([db_ok, creation_ok, validation_ok]):
        print("\nüéâ ¬°TODAS LAS PRUEBAS PASARON! El sistema est√° funcionando correctamente!")
        print("\n‚ú® Caracter√≠sticas verificadas:")
        print("   ‚úÖ Modelo de base de datos completo")
        print("   ‚úÖ Endpoint API funcional")
        print("   ‚úÖ Validaciones del lado del servidor")
        print("   ‚úÖ Respuestas JSON correctas")
        print("   ‚úÖ Manejo de errores")
        print("   ‚úÖ Creaci√≥n exitosa de proveedores")
        
        print("\nüéØ El formulario de proveedores est√° listo para usar!")
        print("   - Inicie el servidor: python manage.py runserver")
        print("   - Abra http://127.0.0.1:8000/dashboard/proveedores/")
        print("   - Haga clic en 'Nuevo Proveedor'")
        print("   - Complete el formulario")
        print("   - El proveedor se crear√° autom√°ticamente con AJAX")
        
    else:
        print("\n‚ùå Algunas pruebas fallaron. Revise los errores anteriores.")
