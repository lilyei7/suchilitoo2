#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Script de verificaci√≥n de sintaxis JavaScript directamente en el archivo
"""

import re
import os

def verify_javascript_fixes():
    """Verifica las correcciones de sintaxis JavaScript"""
    file_path = r'c:\Users\olcha\Desktop\sushi_restaurant\dashboard\templates\dashboard\inventario.html'
    
    print("üîç VERIFICACI√ìN DE CORRECCIONES JAVASCRIPT")
    print("=" * 50)
    print(f"üìÅ Archivo: {file_path}")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Extraer la secci√≥n JavaScript
        js_start = content.find('<script>')
        js_end = content.find('</script>')
        
        if js_start == -1 or js_end == -1:
            print("‚ùå No se encontr√≥ secci√≥n JavaScript")
            return False
        
        js_content = content[js_start:js_end]
        print(f"üìä Secci√≥n JavaScript encontrada ({len(js_content)} caracteres)")
        
        # Lista de verificaciones
        checks = []
        
        # 1. Verificar que no hay .then data => {
        if '.then data =>' in js_content:
            checks.append(("‚ùå", "Error .then data => { encontrado"))
        else:
            checks.append(("‚úÖ", "Promises .then() correctamente formateadas"))
        
        # 2. Verificar balance de llaves
        open_braces = js_content.count('{')
        close_braces = js_content.count('}')
        if open_braces == close_braces:
            checks.append(("‚úÖ", f"Balance de llaves correcto ({open_braces}/{close_braces})"))
        else:
            checks.append(("‚ùå", f"Balance de llaves incorrecto ({open_braces}/{close_braces})"))
        
        # 3. Verificar funciones cr√≠ticas
        critical_functions = [
            'function crearInsumo()',
            'function cargarDatosFormulario()',
            'function mostrarNotificacionElegante(',
            'function crearCategoria()',
            'function crearUnidadMedida()',
            'function cerrarNotificacion('
        ]
        
        missing_functions = []
        for func in critical_functions:
            if func in js_content:
                checks.append(("‚úÖ", f"Funci√≥n encontrada: {func}"))
            else:
                missing_functions.append(func)
                checks.append(("‚ùå", f"Funci√≥n faltante: {func}"))
        
        # 4. Verificar que no hay errores de sintaxis obvios
        syntax_issues = []
        
        # Verificar .catch mal formateados
        if re.search(r'}\s*\.catch\s*\(\s*error\s*=>\s*{\s*mostrarNotificacionElegante', js_content):
            checks.append(("‚úÖ", "Promises .catch() correctamente formateadas"))
        
        # Verificar que no hay console.log sueltos problem√°ticos
        problematic_console = re.findall(r'console\.log\([^)]*\);\s*}(?!\s*\.)', js_content)
        if not problematic_console:
            checks.append(("‚úÖ", "No hay console.log problem√°ticos"))
        else:
            checks.append(("‚ö†Ô∏è", f"{len(problematic_console)} console.log problem√°ticos"))
        
        # 5. Verificar event listeners
        event_listeners = [
            "addEventListener('DOMContentLoaded'",
            "addEventListener('input'",
            "addEventListener('show.bs.modal'",
            "addEventListener('submit'"
        ]
        
        for listener in event_listeners:
            if listener in js_content:
                checks.append(("‚úÖ", f"Event listener encontrado: {listener}"))
        
        # 6. Verificar elementos del DOM
        dom_elements = [
            "getElementById('nuevoInsumoModal')",
            "getElementById('nuevoInsumoForm')",
            "getElementById('nombre')",
            "getElementById('categoria')",
            "getElementById('unidad_medida')"
        ]
        
        for element in dom_elements:
            if element in js_content:
                checks.append(("‚úÖ", f"Acceso DOM encontrado: {element}"))
        
        # Mostrar resultados
        print("\nüìã RESULTADOS DE VERIFICACI√ìN:")
        print("-" * 50)
        
        success_count = 0
        warning_count = 0
        error_count = 0
        
        for status, message in checks:
            print(f"{status} {message}")
            if status == "‚úÖ":
                success_count += 1
            elif status == "‚ö†Ô∏è":
                warning_count += 1
            elif status == "‚ùå":
                error_count += 1
        
        print("-" * 50)
        print(f"üìä RESUMEN: {success_count} √©xitos, {warning_count} advertencias, {error_count} errores")
        
        # Verificaci√≥n espec√≠fica de los errores que reportaste
        print("\nüéØ VERIFICACI√ìN DE ERRORES ESPEC√çFICOS:")
        print("-" * 50)
        
        # Buscar el error original: "Uncaught SyntaxError: unexpected token: identifier"
        specific_issues = []
        
        # Patr√≥n 1: identificadores inesperados despu√©s de }
        unexpected_identifiers = re.findall(r'}\s+[a-zA-Z_$][a-zA-Z0-9_$]*\s*[^(=\.]', js_content)
        if unexpected_identifiers:
            specific_issues.append(f"‚ùå Identificadores inesperados: {len(unexpected_identifiers)}")
        else:
            print("‚úÖ No se encontraron identificadores inesperados")
        
        # Patr√≥n 2: funciones mal cerradas
        malformed_functions = re.findall(r'function\s+\w+\([^)]*\)\s*{[^}]*}\s*}', js_content)
        if len(malformed_functions) > 0:
            specific_issues.append(f"‚ùå Funciones con doble cierre: {len(malformed_functions)}")
        else:
            print("‚úÖ No se encontraron funciones con doble cierre")
        
        # Patr√≥n 3: promises mal formateadas
        malformed_promises = re.findall(r'\.then\s+\w+\s*=>', js_content)
        if malformed_promises:
            specific_issues.append(f"‚ùå Promises mal formateadas: {len(malformed_promises)}")
        else:
            print("‚úÖ Todas las promises est√°n correctamente formateadas")
        
        if specific_issues:
            print("\n‚ùå PROBLEMAS ESPEC√çFICOS ENCONTRADOS:")
            for issue in specific_issues:
                print(f"   {issue}")
        else:
            print("‚úÖ No se encontraron los problemas espec√≠ficos reportados")
        
        # Conclusi√≥n final
        print("\n" + "=" * 50)
        if error_count == 0 and len(specific_issues) == 0:
            print("üéâ CONCLUSI√ìN: ¬°Los errores de sintaxis JavaScript han sido CORREGIDOS!")
            print("‚úÖ El c√≥digo JavaScript parece estar sint√°cticamente correcto")
            print("‚úÖ Todas las funciones cr√≠ticas est√°n presentes")
            print("‚úÖ Los event listeners est√°n configurados")
            print("\nüí° RECOMENDACI√ìN:")
            print("   - Prueba la funcionalidad manualmente en el navegador")
            print("   - Verifica que no aparezcan errores en la consola del navegador")
            print("   - El formulario de nuevo insumo deber√≠a funcionar correctamente")
            return True
        else:
            print("‚ö†Ô∏è  CONCLUSI√ìN: A√∫n pueden existir problemas menores")
            print(f"   - {error_count} errores cr√≠ticos")
            print(f"   - {len(specific_issues)} problemas espec√≠ficos")
            print("\nüîß RECOMENDACI√ìN:")
            print("   - Revisar manualmente los errores reportados")
            print("   - Probar en navegador y verificar consola")
            return False
        
    except Exception as e:
        print(f"‚ùå Error al leer el archivo: {e}")
        return False

if __name__ == "__main__":
    verify_javascript_fixes()
